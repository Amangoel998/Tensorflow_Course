Deep Learnning in a part of Machine Learning that is helpful in predicting and getting answer based on pattern mapped between the set of input data and input answers expected from it.
More conventionally, programmers used to write a rule for getting expected answers from given data. But what to do if Data is unknown?

In these videos you were given an introduction to the concepts and paradigms of Machine Learning and Deep Learning. You saw that the traditional paradigm of expressing rules in a coding language may not always work to solve a problem. As such, scenarios such as Computer Vision are very difficult to solve with rules-based programming. Instead, if we feed a computer with enough data that we describe (or label) as what we want it to recognize, given that computers are really good at processing data and finding patterns that match, then we could potentially ‘train’ a system to solve a problem. We saw a super simple example of that -- fitting numbers to a line. So now let’s go through a notebook and execute the code that trains a neural network to learn how a set of numbers we give it make up a line, so it can then extend the line if we need to.

Eg: X = -1, 0,  1, 2, 3, 4, 5
    Y = -3, -1, 1, 3, 5, 7, 9

By just looking at data, we can expect that Y is calculated from corresponding values of X by subtration. Further, let's think that when you multiply each value of X by 2 and then subtract 1 from it we can expect to get corresponding values of Y.

This is basically what machine learning is. You pass data through filters and design a pattern to match the sequesce data.

In tensorflow we make use of keras API to define and design Neural Networks.
A neural Network is basically a set of functions which can learn patterns. And a simplest NN is one with one neuron.

Syntax: 
model = keras.Sequential([keras.layers.Dense(units=1, input_shape=[1])])

model.compile(optimizer='sgd', loss='mean_squared_error')

xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([-3.0, -1.0, 1.0, 3.0, 5.0, 7.0], dtype=float)

model.fit(xs, ys,epochs=500)

print(model.predict([10.0]))

1. Dense define a layer of neurons given by numbers in "units" param.
2. Sequential method is used to define successive layers of neurons.
3. Shape define what's input to the neural network in the first and in this case the only layer.

4. Optimizer function are used to guess the numbers and check if chosen value provide correct result. Here - Stochastic Gradient Descent
5. Loss function is used to calculate how much an output is away from expected values.
6. As losses gets lesser and lesser, model gets better and better. And after accuracy reaches 100%, convergence is used.
7. Numpy array is used to represnt large data more efficiently.
8. Also provide the datatypes.
9. Model.fit is used to actually train the data based on inputs and outputs provided by repeating itself.
10. Epochs provide repetition count which randomizes data and run the training model repeatedly to get desired accuracy.
11. But even after you try to predict the given value, the value won;t be exact 19.0, since provided data is less and can't really get accurate results.
12. Another reason is that, instead of finding an absolute formula to predict values, neural net use probability instead.

## Loss in prediction
- Loss is the penalty for a bad prediction. Loss is a number indicating how bad the model's prediction was on a single example.
- Loss in prediction can be thought like the confidence in prediction.